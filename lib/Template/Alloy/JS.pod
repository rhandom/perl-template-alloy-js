=head1 NAME

Template::Alloy::JS - JavaScript extensions for Template::Alloy

=head1 SYNOPSIS

    use Template::Alloy::JS;
    my $ta = Template::Alloy::JS->new;

    # same as

    use Template::Alloy;
    my $ta = Template::Alloy->new(COMPILE_JS => 1);

    $ta->process(\q{[% JS %] write("Hello from "+vars.foo) [% END %]}, {foo => 'javascript'})

=head1 DESCRIPTION

The Template::Alloy::Compile role allows for taking the AST returned
by the Parse role, and translating it into a perl code document.  This
is in contrast Template::Alloy::Play which executes the AST directly.

=head1 TODO

=over 4

=item

Translate compile_RAWPERL to actually output rather than calling play_RAWPERL.

=back

=head1 ROLE METHODS

=over 4

=item C<compile_tree_js>

Takes an AST returned by parse_tree and translates it into
perl code using functions stored in the $DIRECTIVES hashref.

A template that looked like the following:

    Foo
    [% GET foo %]
    [% GET bar %]
    Bar

would parse to the following javascript code:

    (function (alloy) {
    // Generated by Template::Alloy::JS v1.016 on Sat Sep 24 00:38:55 2011
    // From file /home/paul/bar.tt

    var blocks = {};
    var meta   = {};
    var code   = function (alloy, out_ref, args) {

      out_ref[0] += "    Foo\n    ":

      // "GET" Line 2 char 6 (chars 14 to 22)
      ref = alloy.get(["foo",0]);
      out_ref[0] += (typeof ref != 'undefined') ? ref : alloy.undefined_get(["foo",0]);

      out_ref[0] += "\n    ":

      // "GET" Line 3 char 6 (chars 32 to 40)
      ref = alloy.get(["bar",0]);
      out_ref[0] += (typeof ref != 'undefined') ? ref : alloy.undefined_get(["bar",0]);

      out_ref[0] += "\n    Bar":

      return out_ref;
    };

    return {
      'blocks' : blocks,
      'meta'   : meta,
      'code'   : code
    };
    })()

The output is quite a bit more complex than the AST, but under
mod_perl conditions, the javascript will run faster than playing the
AST each time.

=item C<compile_expr_js>

Takes an AST variable or expression and returns perl code that can lookup
the variable.

=back

=head1 AUTHOR

Paul Seamons <paul at seamons dot com>

=head1 LICENSE

This module may be distributed under the same terms as Perl itself.

=cut
